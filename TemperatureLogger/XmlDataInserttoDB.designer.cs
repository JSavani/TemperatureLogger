#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemperatureLogger
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WeatherObservations")]
	public partial class XmlDataInserttoDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSensorReading(SensorReading instance);
    partial void UpdateSensorReading(SensorReading instance);
    partial void DeleteSensorReading(SensorReading instance);
    #endregion
		
		public XmlDataInserttoDBDataContext() : 
				base(global::TemperatureLogger.Properties.Settings.Default.WeatherObservationsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public XmlDataInserttoDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public XmlDataInserttoDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public XmlDataInserttoDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public XmlDataInserttoDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SensorReading> SensorReadings
		{
			get
			{
				return this.GetTable<SensorReading>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="NOAALOG.SensorReadings")]
	public partial class SensorReading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Readingsid;
		
		private System.DateTime _observation_time;
		
		private double _temp_f;
		
		private double _temp_c;
		
		private double _relative_humidity;
		
		private double _wind_mph;
		
		private double _wind_kt;
		
		private double _pressure_mb;
		
		private double _pressure_in;
		
		private double _dewpoint_f;
		
		private double _dewpoint_c;
		
		private double _windchill_f;
		
		private double _windchill_c;
		
		private double _visibility_mi;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReadingsidChanging(int value);
    partial void OnReadingsidChanged();
    partial void Onobservation_timeChanging(System.DateTime value);
    partial void Onobservation_timeChanged();
    partial void Ontemp_fChanging(double value);
    partial void Ontemp_fChanged();
    partial void Ontemp_cChanging(double value);
    partial void Ontemp_cChanged();
    partial void Onrelative_humidityChanging(double value);
    partial void Onrelative_humidityChanged();
    partial void Onwind_mphChanging(double value);
    partial void Onwind_mphChanged();
    partial void Onwind_ktChanging(double value);
    partial void Onwind_ktChanged();
    partial void Onpressure_mbChanging(double value);
    partial void Onpressure_mbChanged();
    partial void Onpressure_inChanging(double value);
    partial void Onpressure_inChanged();
    partial void Ondewpoint_fChanging(double value);
    partial void Ondewpoint_fChanged();
    partial void Ondewpoint_cChanging(double value);
    partial void Ondewpoint_cChanged();
    partial void Onwindchill_fChanging(double value);
    partial void Onwindchill_fChanged();
    partial void Onwindchill_cChanging(double value);
    partial void Onwindchill_cChanged();
    partial void Onvisibility_miChanging(double value);
    partial void Onvisibility_miChanged();
    #endregion
		
		public SensorReading()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Readingsid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Readingsid
		{
			get
			{
				return this._Readingsid;
			}
			set
			{
				if ((this._Readingsid != value))
				{
					this.OnReadingsidChanging(value);
					this.SendPropertyChanging();
					this._Readingsid = value;
					this.SendPropertyChanged("Readingsid");
					this.OnReadingsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_observation_time", DbType="DateTime NOT NULL")]
		public System.DateTime observation_time
		{
			get
			{
				return this._observation_time;
			}
			set
			{
				if ((this._observation_time != value))
				{
					this.Onobservation_timeChanging(value);
					this.SendPropertyChanging();
					this._observation_time = value;
					this.SendPropertyChanged("observation_time");
					this.Onobservation_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_temp_f", DbType="Float NOT NULL")]
		public double temp_f
		{
			get
			{
				return this._temp_f;
			}
			set
			{
				if ((this._temp_f != value))
				{
					this.Ontemp_fChanging(value);
					this.SendPropertyChanging();
					this._temp_f = value;
					this.SendPropertyChanged("temp_f");
					this.Ontemp_fChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_temp_c", DbType="Float NOT NULL")]
		public double temp_c
		{
			get
			{
				return this._temp_c;
			}
			set
			{
				if ((this._temp_c != value))
				{
					this.Ontemp_cChanging(value);
					this.SendPropertyChanging();
					this._temp_c = value;
					this.SendPropertyChanged("temp_c");
					this.Ontemp_cChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relative_humidity", DbType="Float NOT NULL")]
		public double relative_humidity
		{
			get
			{
				return this._relative_humidity;
			}
			set
			{
				if ((this._relative_humidity != value))
				{
					this.Onrelative_humidityChanging(value);
					this.SendPropertyChanging();
					this._relative_humidity = value;
					this.SendPropertyChanged("relative_humidity");
					this.Onrelative_humidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wind_mph", DbType="Float NOT NULL")]
		public double wind_mph
		{
			get
			{
				return this._wind_mph;
			}
			set
			{
				if ((this._wind_mph != value))
				{
					this.Onwind_mphChanging(value);
					this.SendPropertyChanging();
					this._wind_mph = value;
					this.SendPropertyChanged("wind_mph");
					this.Onwind_mphChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wind_kt", DbType="Float NOT NULL")]
		public double wind_kt
		{
			get
			{
				return this._wind_kt;
			}
			set
			{
				if ((this._wind_kt != value))
				{
					this.Onwind_ktChanging(value);
					this.SendPropertyChanging();
					this._wind_kt = value;
					this.SendPropertyChanged("wind_kt");
					this.Onwind_ktChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pressure_mb", DbType="Float NOT NULL")]
		public double pressure_mb
		{
			get
			{
				return this._pressure_mb;
			}
			set
			{
				if ((this._pressure_mb != value))
				{
					this.Onpressure_mbChanging(value);
					this.SendPropertyChanging();
					this._pressure_mb = value;
					this.SendPropertyChanged("pressure_mb");
					this.Onpressure_mbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pressure_in", DbType="Float NOT NULL")]
		public double pressure_in
		{
			get
			{
				return this._pressure_in;
			}
			set
			{
				if ((this._pressure_in != value))
				{
					this.Onpressure_inChanging(value);
					this.SendPropertyChanging();
					this._pressure_in = value;
					this.SendPropertyChanged("pressure_in");
					this.Onpressure_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dewpoint_f", DbType="Float NOT NULL")]
		public double dewpoint_f
		{
			get
			{
				return this._dewpoint_f;
			}
			set
			{
				if ((this._dewpoint_f != value))
				{
					this.Ondewpoint_fChanging(value);
					this.SendPropertyChanging();
					this._dewpoint_f = value;
					this.SendPropertyChanged("dewpoint_f");
					this.Ondewpoint_fChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dewpoint_c", DbType="Float NOT NULL")]
		public double dewpoint_c
		{
			get
			{
				return this._dewpoint_c;
			}
			set
			{
				if ((this._dewpoint_c != value))
				{
					this.Ondewpoint_cChanging(value);
					this.SendPropertyChanging();
					this._dewpoint_c = value;
					this.SendPropertyChanged("dewpoint_c");
					this.Ondewpoint_cChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_windchill_f", DbType="Float NOT NULL")]
		public double windchill_f
		{
			get
			{
				return this._windchill_f;
			}
			set
			{
				if ((this._windchill_f != value))
				{
					this.Onwindchill_fChanging(value);
					this.SendPropertyChanging();
					this._windchill_f = value;
					this.SendPropertyChanged("windchill_f");
					this.Onwindchill_fChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_windchill_c", DbType="Float NOT NULL")]
		public double windchill_c
		{
			get
			{
				return this._windchill_c;
			}
			set
			{
				if ((this._windchill_c != value))
				{
					this.Onwindchill_cChanging(value);
					this.SendPropertyChanging();
					this._windchill_c = value;
					this.SendPropertyChanged("windchill_c");
					this.Onwindchill_cChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visibility_mi", DbType="Float NOT NULL")]
		public double visibility_mi
		{
			get
			{
				return this._visibility_mi;
			}
			set
			{
				if ((this._visibility_mi != value))
				{
					this.Onvisibility_miChanging(value);
					this.SendPropertyChanging();
					this._visibility_mi = value;
					this.SendPropertyChanged("visibility_mi");
					this.Onvisibility_miChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
